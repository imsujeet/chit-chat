{"version":3,"sources":["Components/Message.js","Components/MessageList.js","Components/SendMessageForm.js","Components/RoomList.js","Components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Message","props","react_default","a","createElement","className","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","roomId","messages","map","message","index","Components_Message","key","senderId","parts","payload","content","React","Component","SendMessageForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSubmit","preventDefault","sendMessage","state","onSubmit","placeholder","type","onChange","RoomList","orderedRooms","toConsumableArray","rooms","sort","b","id","room","active","onClick","subscribeToRoom","href","name","NewRoomForm","roomName","bind","assertThisInitialized","createRoom","required","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","err","console","log","_this2","ChatKit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","error","_this3","subscribeToRoomMultipart","hooks","onMessage","concat","_this4","Components_RoomList","Components_MessageList","Components_SendMessageForm","disabled","Components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80e991df.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Message(props){\r\n    return(\r\n        <div className=\"message\">\r\n            <div className=\"message-username\">{props.username}</div>\r\n            <div className=\"message-text\">{props.text}</div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default Message","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Message from './Message'\r\n\r\n\r\n\r\nclass MessageList extends React.Component{\r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this)\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        if (this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this)\r\n            node.scrollTop = node.scrollHeight   \r\n        }\r\n    }\r\n    render(){\r\n        if (!this.props.roomId) {\r\n            return (\r\n                <div className=\"message-list\">\r\n                    <div className=\"join-room\">\r\n                    &uarr; Join a room!\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"message-list\">\r\n                {this.props.messages.map((message,index)=>{\r\n                    return(\r\n                        <Message key={index} username={message.senderId} text={message.parts[0].payload.content}/>\r\n                        \r\n\r\n                        \r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList\r\n","import  React from 'react'\r\n\r\nclass SendMessageForm extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            message:''\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        \r\n        this.setState({\r\n            message:e.target.value\r\n        })\r\n        \r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        this.props.sendMessage(this.state.message)\r\n        this.setState({\r\n            message:''\r\n        })\r\n    }\r\n    render(){\r\n        \r\n        \r\n        \r\n        return(\r\n            <form  onSubmit={this.handleSubmit} className=\"send-message-form\">\r\n                <input\r\n                    placeholder=\"Type your message \"\r\n                    type=\"text\"\r\n                    value={this.state.message}\r\n                    onChange={this.handleChange}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default SendMessageForm","import  React from 'react'\r\n\r\nclass RoomList extends React.Component{\r\n\r\n    render(){\r\n        const orderedRooms=[...this.props.rooms].sort((a, b) => a.id - b.id)\r\n        return(\r\n            <div className=\"rooms-list\">\r\n                <ul>\r\n                    <h3>Your Rooms:</h3>\r\n                    {orderedRooms.map(room =>{\r\n                        const active=this.props.roomId === room.id?\"active\":\"\"\r\n                        return(\r\n                            <li key={room.id} className={\"room \"+active}>\r\n                                <a onClick={()=>this.props.subscribeToRoom(room.id)} href=\"#\">#{room.name}</a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RoomList","import  React from 'react'\r\n\r\nclass NewRoomForm extends React.Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    handleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.createRoom(this.state.roomName)\r\n        this.setState({roomName: ''})\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        value={this.state.roomName}\r\n                        onChange={this.handleChange}\r\n                        type=\"text\" \r\n                        placeholder=\"Create a room\" \r\n                        required />\r\n                    <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default NewRoomForm","import React from 'react';\nimport ChatKit from '@pusher/chatkit-client'\nimport MessageList from './Components/MessageList'\nimport SendMessageForm from './Components/SendMessageForm'\nimport RoomList from './Components/RoomList'\nimport NewRoomForm from './Components/NewRoomForm'\nimport { tokenUrl, instanceLocator } from \"./config\"\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      messages:[],\n      joinableRooms:[],\n      joinedRooms:[],\n      roomId:null\n      \n    }\n    this.subscribeToRoom=this.subscribeToRoom.bind(this)\n    this.createRoom=this.createRoom.bind(this)\n  }\n\n  componentDidMount(){\n    const chatManager=new ChatKit.ChatManager({\n      instanceLocator,\n      userId: 'skraa',\n      tokenProvider: new ChatKit.TokenProvider({\n        url: tokenUrl\n      })\n    })\n    chatManager.connect()\n        .then(currentUser => {\n            this.currentUser=currentUser\n            this.getRooms()\n           \n        })\n        .catch(error => {\n          console.error(\"error:\", error);\n        })\n  }\n  getRooms = () =>{\n    this.currentUser.getJoinableRooms()\n            .then(joinableRooms => {\n              this.setState({\n                joinableRooms,\n                joinedRooms:this.currentUser.rooms\n              })\n            })\n            .catch(err => console.log('error on joinableRooms: ', err))\n  }\n  subscribeToRoom(roomId){\n    this.setState({messages:[]})\n    this.currentUser.subscribeToRoomMultipart({\n      roomId: roomId, /** swap out */\n      hooks: {\n          onMessage: message => {\n            \n            this.setState({\n              messages:[...this.state.messages,message]\n            })\n          }\n        }\n    })\n    .then(room =>{\n      this.setState({\n        roomId:room.id\n      })\n      this.getRooms()\n    })\n    .catch((err) => console.log('error on subscribing to room: ', err))\n    \n  }\n  sendMessage=(text)=>{\n    this.currentUser.sendMessage({\n      text,\n      roomId:this.state.roomId\n    })\n\n    \n\n  }\n  createRoom(name){\n    this.currentUser.createRoom({\n        name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n    .catch(err => console.log('error with createRoom: ', err))\n  }\n\n  \n  render(){\n    return(\n      <div className=\"app\">\n        <RoomList roomId={this.state.roomId} subscribeToRoom={this.subscribeToRoom} rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}/>\n        <MessageList roomId={this.state.roomId} messages={this.state.messages}/>\n        <SendMessageForm disabled={!this.state.roomId} sendMessage={this.sendMessage}/>\n        <NewRoomForm createRoom={this.createRoom}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/9bfe2a86-5f5c-4659-afb4-d1ce3a74b6c0/token\";\r\nconst instanceLocator = \"v1:us1:9bfe2a86-5f5c-4659-afb4-d1ce3a74b6c0\";\r\n\r\nexport { tokenUrl, instanceLocator }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}